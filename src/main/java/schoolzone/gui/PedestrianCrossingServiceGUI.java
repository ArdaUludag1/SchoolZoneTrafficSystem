/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package schoolzone.gui;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;
import SchoolZoneTraffic.*;
import java.util.Iterator;
/**
 *
 * @author ardau
 */
public class PedestrianCrossingServiceGUI extends javax.swing.JFrame {

    /**
     * Creates new form PedestrianCrossingServiceGUI
     */
    
       // gRPC connection
    private ManagedChannel channel;
    private PedestrianCrossingServiceGrpc.PedestrianCrossingServiceBlockingStub blockingStub;
    private PedestrianCrossingServiceGrpc.PedestrianCrossingServiceStub asyncStub;
    private StreamObserver<PedestrianAction> bidiRequestStream;
    
    public PedestrianCrossingServiceGUI() {
        initComponents();
        setTitle("Pedestrian Crossing Service");
        
        channel = ManagedChannelBuilder.forAddress("localhost", 50502)
        .usePlaintext()
        .build();
        blockingStub = PedestrianCrossingServiceGrpc.newBlockingStub(channel);
        asyncStub = PedestrianCrossingServiceGrpc.newStub(channel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        btnRequestToCross = new javax.swing.JButton();
        labelStatusValue = new javax.swing.JLabel();
        labelPedestrianCount = new javax.swing.JLabel();
        txtPedestrianCount = new javax.swing.JTextField();
        btnSendPedestrianFlow = new javax.swing.JButton();
        labelPedestrianAck = new javax.swing.JLabel();
        btnStartCountdown = new javax.swing.JButton();
        labelCountdown = new javax.swing.JLabel();
        comboPedestrianAction = new javax.swing.JComboBox<>();
        btnSendAction = new javax.swing.JButton();
        btnStartMonitor = new javax.swing.JButton();
        labelActionSelect = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaAIResponse = new javax.swing.JTextArea();
        labelCountdownValue = new javax.swing.JLabel();
        btnBackToMain = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnRequestToCross.setText("Request to Cross");
        btnRequestToCross.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestToCrossActionPerformed(evt);
            }
        });

        labelStatusValue.setText("Status:");

        labelPedestrianCount.setText("Number of pedestrians:");

        txtPedestrianCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPedestrianCountActionPerformed(evt);
            }
        });

        btnSendPedestrianFlow.setText("Send Pedestrian Flow");
        btnSendPedestrianFlow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendPedestrianFlowActionPerformed(evt);
            }
        });

        labelPedestrianAck.setText("Server says:");

        btnStartCountdown.setText("Start Countdown");
        btnStartCountdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartCountdownActionPerformed(evt);
            }
        });

        labelCountdown.setText("Countdown:");

        comboPedestrianAction.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Waiting", "Started crossing", "Crossed during red", "Crossing completed" }));
        comboPedestrianAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPedestrianActionActionPerformed(evt);
            }
        });

        btnSendAction.setText("Send Action");
        btnSendAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionActionPerformed(evt);
            }
        });

        btnStartMonitor.setText("Start AI Live Monitor");
        btnStartMonitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartMonitorActionPerformed(evt);
            }
        });

        labelActionSelect.setText("Select Action:");

        textAreaAIResponse.setColumns(20);
        textAreaAIResponse.setRows(5);
        jScrollPane1.setViewportView(textAreaAIResponse);

        btnBackToMain.setText("Back to Main");
        btnBackToMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToMainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelPedestrianAck, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(labelCountdown, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(labelCountdownValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(labelActionSelect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(220, 220, 220)))
                                .addGap(12, 12, 12))
                            .addComponent(btnStartCountdown, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSendPedestrianFlow, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(3, 3, 3)
                                    .addComponent(labelPedestrianCount, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtPedestrianCount, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labelStatusValue, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(btnRequestToCross, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSendAction, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnStartMonitor))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboPedestrianAction, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBackToMain, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(btnRequestToCross)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelStatusValue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPedestrianCount)
                    .addComponent(txtPedestrianCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(btnSendPedestrianFlow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelPedestrianAck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnStartCountdown)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCountdown)
                    .addComponent(labelCountdownValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelActionSelect)
                    .addComponent(comboPedestrianAction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnStartMonitor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSendAction)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBackToMain)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPedestrianCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPedestrianCountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPedestrianCountActionPerformed

    private void comboPedestrianActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPedestrianActionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboPedestrianActionActionPerformed

    private void btnRequestToCrossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestToCrossActionPerformed
            // TODO add your handling code here:
            // unary request
    EmptyRequest request = EmptyRequest.newBuilder().build();
    CrossingResponse response = blockingStub.getCrossingStatus(request);
    labelStatusValue.setText(response.getStatus());    
            
    }//GEN-LAST:event_btnRequestToCrossActionPerformed

    private void btnSendPedestrianFlowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendPedestrianFlowActionPerformed
        // TODO add your handling code here:
            // client streaming
    StreamObserver<PedestrianAck> responseObserver = new StreamObserver<PedestrianAck>() {
        @Override
        public void onNext(PedestrianAck value) {
            labelPedestrianAck.setText(value.getMessage());
        }
        @Override
        public void onError(Throwable t) {}
        @Override
        public void onCompleted() {}
    };

    StreamObserver<PedestrianData> requestObserver = asyncStub.sendPedestrianData(responseObserver);

    int count = Integer.parseInt(txtPedestrianCount.getText());
    for (int i = 0; i < count; i++) {
        PedestrianData data = PedestrianData.newBuilder()
                .setPedestrianCount(1)
                .build();
        requestObserver.onNext(data);
    }

    requestObserver.onCompleted();
    }//GEN-LAST:event_btnSendPedestrianFlowActionPerformed

    private void btnStartCountdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartCountdownActionPerformed
        // TODO add your handling code here:
            // server streaming
    // server streaming in new thread
    new Thread(() -> {
        CountdownRequest request = CountdownRequest.newBuilder().build();
        Iterator<CrossingResponse> responses = blockingStub.streamCrossingUpdates(request);

        while (responses.hasNext()) {
            CrossingResponse res = responses.next();
            String seconds = String.valueOf(res.getSecondsRemaining());

            javax.swing.SwingUtilities.invokeLater(() -> {
                labelCountdownValue.setText(seconds);
            });
        }
    }).start();
    }//GEN-LAST:event_btnStartCountdownActionPerformed

    private void btnStartMonitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartMonitorActionPerformed
        // TODO add your handling code here:
            // start bi-directional stream
    bidiRequestStream = asyncStub.streamPedestrianStatus(new StreamObserver<CrossingResponse>() {
        @Override
        public void onNext(CrossingResponse value) {
            textAreaAIResponse.append("System: " + value.getStatus() + "\n");
        }
        @Override
        public void onError(Throwable t) {}
        @Override
        public void onCompleted() {
            textAreaAIResponse.append("Stream ended.\n");
        }
    });
    }//GEN-LAST:event_btnStartMonitorActionPerformed

    private void btnSendActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionActionPerformed
        // TODO add your handling code here:
            // send selected action
    if (bidiRequestStream == null) return;
    String action = (String) comboPedestrianAction.getSelectedItem();
    PedestrianAction request = PedestrianAction.newBuilder()
            .setAction(action)
            .build();
    bidiRequestStream.onNext(request);
    }//GEN-LAST:event_btnSendActionActionPerformed

    private void btnBackToMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToMainActionPerformed
        // TODO add your handling code here:
            new MainServiceLauncher().setVisible(true);
            this.dispose();
    }//GEN-LAST:event_btnBackToMainActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PedestrianCrossingServiceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PedestrianCrossingServiceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PedestrianCrossingServiceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PedestrianCrossingServiceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PedestrianCrossingServiceGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackToMain;
    private javax.swing.JButton btnRequestToCross;
    private javax.swing.JButton btnSendAction;
    private javax.swing.JButton btnSendPedestrianFlow;
    private javax.swing.JButton btnStartCountdown;
    private javax.swing.JButton btnStartMonitor;
    private javax.swing.JComboBox<String> comboPedestrianAction;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel labelActionSelect;
    private javax.swing.JLabel labelCountdown;
    private javax.swing.JLabel labelCountdownValue;
    private javax.swing.JLabel labelPedestrianAck;
    private javax.swing.JLabel labelPedestrianCount;
    private javax.swing.JLabel labelStatusValue;
    private javax.swing.JTextArea textAreaAIResponse;
    private javax.swing.JTextField txtPedestrianCount;
    // End of variables declaration//GEN-END:variables
}
