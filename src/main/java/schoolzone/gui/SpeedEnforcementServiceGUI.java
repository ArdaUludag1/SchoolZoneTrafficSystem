/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package schoolzone.gui;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;

import SchoolZoneTraffic.SpeedLimitEnforcementService.SpeedRequest;
import SchoolZoneTraffic.SpeedLimitEnforcementService.SpeedResponse;
import SchoolZoneTraffic.SpeedLimitEnforcementService.SpeedData;
import SchoolZoneTraffic.SpeedLimitEnforcementService.SpeedAck;
import SchoolZoneTraffic.SpeedEnforcementServiceGrpc;
/**
 *
 * @author ardau
 */
public class SpeedEnforcementServiceGUI extends javax.swing.JFrame {
    // gRPC setup
private final ManagedChannel channel;
private final SpeedEnforcementServiceGrpc.SpeedEnforcementServiceBlockingStub blockingStub;
private final SpeedEnforcementServiceGrpc.SpeedEnforcementServiceStub asyncStub;
private StreamObserver<SpeedData> bidiStream;
    

    /**
     * Creates new form SpeedEnforcementServiceGUI
     */
    public SpeedEnforcementServiceGUI() {
        initComponents();
        setTitle("Speed Enforcement Service");
        
        channel = ManagedChannelBuilder.forAddress("localhost", 50503)
        .usePlaintext()
        .build();

    blockingStub = SpeedEnforcementServiceGrpc.newBlockingStub(channel);
    asyncStub = SpeedEnforcementServiceGrpc.newStub(channel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGetSpeedStatus = new javax.swing.JButton();
        labelSpeedLimit = new javax.swing.JLabel();
        labelViolations = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtVehicleId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCurrentSpeed = new javax.swing.JTextField();
        btnSendSpeedData = new javax.swing.JButton();
        labelServerResponse = new javax.swing.JLabel();
        btnStartLiveLog = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaLog = new javax.swing.JTextArea();
        btnStartAIMonitor = new javax.swing.JButton();
        comboCondition = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        btnSendCondition = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaAIResponse = new javax.swing.JTextArea();
        btnBackToMain = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnGetSpeedStatus.setText("Get Speed Status");
        btnGetSpeedStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetSpeedStatusActionPerformed(evt);
            }
        });

        labelSpeedLimit.setText("Speed Limit:");

        labelViolations.setText("Violations Today:");

        jLabel1.setText("Vehicle ID:");

        jLabel2.setText("Current Speed:");

        btnSendSpeedData.setText("Report Speed Data");
        btnSendSpeedData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendSpeedDataActionPerformed(evt);
            }
        });

        labelServerResponse.setText("Server Response:");

        btnStartLiveLog.setText("Start Live Violation Log");
        btnStartLiveLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartLiveLogActionPerformed(evt);
            }
        });

        jLabel3.setText("Live Feed: ");

        textAreaLog.setColumns(20);
        textAreaLog.setRows(5);
        jScrollPane1.setViewportView(textAreaLog);

        btnStartAIMonitor.setText("Start Smart AI Monitor");
        btnStartAIMonitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartAIMonitorActionPerformed(evt);
            }
        });

        comboCondition.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Heavy Traffic", "School Zone", "Road Work", "Clear Road" }));

        jLabel4.setText("Select Condition:");

        btnSendCondition.setText("Send Condition");
        btnSendCondition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendConditionActionPerformed(evt);
            }
        });

        jLabel5.setText("AI Response:");

        textAreaAIResponse.setColumns(20);
        textAreaAIResponse.setRows(5);
        jScrollPane2.setViewportView(textAreaAIResponse);

        btnBackToMain.setText("Back to Main");
        btnBackToMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToMainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBackToMain))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1)
                            .addComponent(btnStartLiveLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboCondition, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btnSendSpeedData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnGetSpeedStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnStartAIMonitor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSendCondition, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelSpeedLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelViolations, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelServerResponse)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtCurrentSpeed, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                            .addComponent(txtVehicleId))))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(btnGetSpeedStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelSpeedLimit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelViolations)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtVehicleId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCurrentSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSendSpeedData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelServerResponse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnStartLiveLog)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnStartAIMonitor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboCondition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSendCondition)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBackToMain)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetSpeedStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetSpeedStatusActionPerformed
        // TODO add your handling code here:
            SpeedRequest request = SpeedRequest.newBuilder()
            .setZoneId("SchoolZoneA")
            .build();

    SpeedResponse response = blockingStub.getSpeedStatus(request);

    labelSpeedLimit.setText("Speed Limit: " + response.getSpeedLimit() + " km/h");
    labelViolations.setText("Violations Today: " + response.getTotalViolationsToday());
    }//GEN-LAST:event_btnGetSpeedStatusActionPerformed

    private void btnSendSpeedDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendSpeedDataActionPerformed
        // TODO add your handling code here:
            String vehicleId = txtVehicleId.getText();
    int currentSpeed = Integer.parseInt(txtCurrentSpeed.getText());

    // Stream observer to receive the server's final response
    StreamObserver<SpeedAck> responseObserver = new StreamObserver<SpeedAck>() {
        @Override
        public void onNext(SpeedAck value) {
            labelServerResponse.setText("Server Response: " + value.getMessage());
        }

        @Override
        public void onError(Throwable t) {
            labelServerResponse.setText("Error: " + t.getMessage());
        }

        @Override
        public void onCompleted() {
            // Nothing needed here
        }
    };

    // Create stream to send speed data
    StreamObserver<SpeedData> requestObserver = asyncStub.sendSpeedData(responseObserver);

    SpeedData data = SpeedData.newBuilder()
            .setVehicleId(vehicleId)
            .setZoneId("SchoolZoneA")
            .setCurrentSpeed(currentSpeed)
            .build();

    requestObserver.onNext(data);
    requestObserver.onCompleted(); // Since we're sending once per button click
    }//GEN-LAST:event_btnSendSpeedDataActionPerformed

    private void btnStartLiveLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartLiveLogActionPerformed
        // TODO add your handling code here:
        
            SpeedRequest request = SpeedRequest.newBuilder()
            .setZoneId("SchoolZoneA")
            .build();

    asyncStub.streamSpeedUpdates(request, new StreamObserver<SpeedResponse>() {
        @Override
        public void onNext(SpeedResponse value) {
            String log = value.getVehicleId() + " - " + value.getCurrentSpeed() + " km/h - "
                    + (value.getViolationDetected() ? "Fined" : "Safe");
            textAreaLog.append(log + "\n");
        }

        @Override
        public void onError(Throwable t) {
            textAreaLog.append("Error: " + t.getMessage() + "\n");
        }

        @Override
        public void onCompleted() {
            textAreaLog.append("Live stream ended.\n");
        }
    });
    }//GEN-LAST:event_btnStartLiveLogActionPerformed

    private void btnStartAIMonitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartAIMonitorActionPerformed
        // TODO add your handling code here:
        
        bidiStream = asyncStub.adjustSpeedLimits(new StreamObserver<SpeedResponse>() {
        @Override
        public void onNext(SpeedResponse value) {
            String message = "Speed limit updated to " + value.getSpeedLimit() + " km/h due to " + value.getReason().toLowerCase() + ".";
            textAreaAIResponse.append(message + "\n");
        }

        @Override
        public void onError(Throwable t) {
            textAreaAIResponse.append("Error: " + t.getMessage() + "\n");
        }

        @Override
        public void onCompleted() {
            textAreaAIResponse.append("AI monitoring ended.\n");
        }
    });
    }//GEN-LAST:event_btnStartAIMonitorActionPerformed

    private void btnSendConditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendConditionActionPerformed
        // TODO add your handling code here:
         if (bidiStream == null) {
        textAreaAIResponse.append("AI monitor not started.\n");
        return;
    }

    String condition = comboCondition.getSelectedItem().toString();

    SpeedData data = SpeedData.newBuilder()
            .setVehicleId("") // Empty, only condition matters here
            .setZoneId(condition) // Re-using zoneId field for condition label
            .setCurrentSpeed(0)   // Not needed
            .build();

        bidiStream.onNext(data);
        
    }//GEN-LAST:event_btnSendConditionActionPerformed

    private void btnBackToMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToMainActionPerformed
        // TODO add your handling code here:
        new MainServiceLauncher().setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnBackToMainActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpeedEnforcementServiceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    //</editor-fold>
    
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SpeedEnforcementServiceGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBackToMain;
    private javax.swing.JButton btnGetSpeedStatus;
    private javax.swing.JButton btnSendCondition;
    private javax.swing.JButton btnSendSpeedData;
    private javax.swing.JButton btnStartAIMonitor;
    private javax.swing.JButton btnStartLiveLog;
    private javax.swing.JComboBox<String> comboCondition;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelServerResponse;
    private javax.swing.JLabel labelSpeedLimit;
    private javax.swing.JLabel labelViolations;
    private javax.swing.JTextArea textAreaAIResponse;
    private javax.swing.JTextArea textAreaLog;
    private javax.swing.JTextField txtCurrentSpeed;
    private javax.swing.JTextField txtVehicleId;
    // End of variables declaration//GEN-END:variables
}
