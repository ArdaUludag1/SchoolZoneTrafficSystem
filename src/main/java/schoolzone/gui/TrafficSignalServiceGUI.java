/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package schoolzone.gui;

// gRPC core
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.stub.StreamObserver;
import io.grpc.Metadata;
import io.grpc.ClientInterceptor;
import io.grpc.stub.MetadataUtils;


// gRPC message and service classes (from your .proto)
import grpc.generated.schoolzone.TrafficSignalServiceGrpc;
import grpc.generated.schoolzone.SignalRequest;
import grpc.generated.schoolzone.SignalResponse;
import grpc.generated.schoolzone.SignalStatus;
import grpc.generated.schoolzone.SignalCycleRequest;
import grpc.generated.schoolzone.SignalCycleResponse;
import grpc.generated.schoolzone.SignalEvent;
import grpc.generated.schoolzone.SignalSummary;
import grpc.generated.schoolzone.SignalAdjustRequest;
import grpc.generated.schoolzone.SignalAdjustResponse;  

// Java Swing GUI components

// For button click events
/**
 *
 * @author ardau
 */
public class TrafficSignalServiceGUI extends javax.swing.JFrame {
    
    /**
     * Creates new form TrafficSignalServiceGUI
     */
    public TrafficSignalServiceGUI() {
        initComponents();
        setTitle("Traffic Signal Service");
        zoneComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {
        "Zone A (Vehicle Light)", "Zone B (Pedestrian Light)", "Zone C (Bcycle Light)"
            }));
        signalComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {
        "GREEN", "YELLOW", "RED"
            }));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        getSignalButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        responseTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        locationTextField = new javax.swing.JTextField();
        startStreamButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        sendSensorButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        adjustSignalButton = new javax.swing.JButton();
        vehicleField = new javax.swing.JTextField();
        pedestrianField = new javax.swing.JTextField();
        bicycleField = new javax.swing.JTextField();
        signalComboBox = new javax.swing.JComboBox<>();
        zoneComboBox = new javax.swing.JComboBox<>();
        btnBackToMain = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Location :");

        getSignalButton.setText("Get Signal");
        getSignalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getSignalButtonActionPerformed(evt);
            }
        });

        responseTextArea.setColumns(20);
        responseTextArea.setRows(5);
        jScrollPane1.setViewportView(responseTextArea);

        jLabel2.setText("Response:");

        locationTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationTextFieldActionPerformed(evt);
            }
        });

        startStreamButton.setText("Start Stream");
        startStreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStreamButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Vehicle Count:");

        jLabel4.setText("Pedestrian Count:");

        jLabel5.setText("Bicycle Count:");

        sendSensorButton.setText(" Send Sensor Data");
        sendSensorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSensorButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Adjust Zone:  ");

        jLabel7.setText("Desired Signal:");

        adjustSignalButton.setText("Adjust Signal");
        adjustSignalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjustSignalButtonActionPerformed(evt);
            }
        });

        signalComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        zoneComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        zoneComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoneComboBoxActionPerformed(evt);
            }
        });

        btnBackToMain.setText("Back to Main");
        btnBackToMain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToMainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(15, 15, 15))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bicycleField)
                            .addComponent(pedestrianField)
                            .addComponent(vehicleField)
                            .addComponent(signalComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(zoneComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(locationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(getSignalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(startStreamButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sendSensorButton)
                            .addComponent(adjustSignalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 82, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBackToMain, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(locationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startStreamButton)
                    .addComponent(getSignalButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(vehicleField)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pedestrianField)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bicycleField)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sendSensorButton)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(zoneComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(signalComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(adjustSignalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBackToMain)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getSignalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getSignalButtonActionPerformed
       // TODO add your handling code here:
           // Get the input location text
    String location = locationTextField.getText().trim().toLowerCase();

    // Create a gRPC channel to the server
    ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50052)
        .usePlaintext()
        .intercept(makeAuthHeader())
        .build();

    // Create the blocking stub for unary call
    TrafficSignalServiceGrpc.TrafficSignalServiceBlockingStub stub =
            TrafficSignalServiceGrpc.newBlockingStub(channel);

    // Prepare the request
    SignalRequest request = SignalRequest.newBuilder()
            .setLocation(location)
            .build();

    try {
        // Call the Unary RPC and get response
        SignalResponse response = stub.getCurrentSignal(request);

        // Append the result to the response text area
        responseTextArea.append("Signal at " + location + ": " + response.getStatus() + "\n");

        if (response.getStatus() == SignalStatus.GREEN) {
            responseTextArea.append("Stays GREEN for " + response.getGreenDuration() + " seconds\n");
        } else {
            responseTextArea.append("Turns GREEN in " + response.getTimeUntilGreen() + " seconds\n");
        }

    } catch (Exception ex) {
        // Handle error and display it
        responseTextArea.append("Error: " + ex.getMessage() + "\n");
    }

    // Optionally shut down the channel (can be omitted for performance)
    // channel.shutdown();

    }//GEN-LAST:event_getSignalButtonActionPerformed

    private void locationTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locationTextFieldActionPerformed

    private void startStreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStreamButtonActionPerformed
        // TODO add your handling code here:  
           // Get the input location
    String location = locationTextField.getText().trim().toLowerCase();

    // Create a gRPC channel
    ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50052)
        .usePlaintext()
        .intercept(makeAuthHeader())
        .build();

    // Create an asynchronous stub for server-streaming
    TrafficSignalServiceGrpc.TrafficSignalServiceStub stub =
            TrafficSignalServiceGrpc.newStub(channel);

    // Build the streaming request
    SignalCycleRequest request = SignalCycleRequest.newBuilder()
            .setLocation(location)
            .setRepeatCount(1) // Can be adjusted if needed
            .build();

    // Inform user
    responseTextArea.append("Starting signal stream for: " + location + "\n");

    // Stream the signal cycle from server
    stub.streamSignalCycle(request, new StreamObserver<SignalCycleResponse>() {
        @Override
        public void onNext(SignalCycleResponse response) {
            responseTextArea.append(location + " - " + response.getStatus() + 
                    " - " + response.getDurationSeconds() + " seconds remaining\n");
        }

        @Override
        public void onError(Throwable t) {
            responseTextArea.append("Stream error: " + t.getMessage() + "\n");
        }

        @Override
        public void onCompleted() {
            responseTextArea.append("Signal stream ended.\n");
        }
    });
    }//GEN-LAST:event_startStreamButtonActionPerformed

    private void adjustSignalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjustSignalButtonActionPerformed
        // TODO add your handling code here:
   String zone = zoneComboBox.getSelectedItem().toString().toLowerCase();
String selectedSignal = signalComboBox.getSelectedItem().toString().toUpperCase();

SignalStatus status;
switch (selectedSignal) {
    case "GREEN":
        status = SignalStatus.GREEN;
        break;
    case "YELLOW":
        status = SignalStatus.YELLOW;
        break;
    case "RED":
        status = SignalStatus.RED;
        break;
    default:
        responseTextArea.append("Invalid signal selection.\n");
        return;
}

    ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50052)
        .usePlaintext()
        .intercept(makeAuthHeader())
        .build();

    TrafficSignalServiceGrpc.TrafficSignalServiceStub asyncStub = TrafficSignalServiceGrpc.newStub(channel);

    StreamObserver<SignalAdjustRequest> requestObserver = asyncStub.adjustSignalsLive(new StreamObserver<SignalAdjustResponse>() {
        @Override
        public void onNext(SignalAdjustResponse response) {
            responseTextArea.append("Adjustment response: " + response.getMessage() + "\n");
        }

        @Override
        public void onError(Throwable t) {
            responseTextArea.append("Error adjusting signal: " + t.getMessage() + "\n");
        }

        @Override
        public void onCompleted() {
            responseTextArea.append("Signal adjustment stream completed.\n");
        }
    });

    requestObserver.onNext(SignalAdjustRequest.newBuilder()
            .setLocation(zone)
            .setRequestedStatus(status)
            .build());

    requestObserver.onCompleted();
    }//GEN-LAST:event_adjustSignalButtonActionPerformed

    private void sendSensorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendSensorButtonActionPerformed
        // TODO add your handling code here:
           ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", 50052)
            .usePlaintext()
            .intercept(makeAuthHeader())
            .build();

    // Create async stub for streaming
    TrafficSignalServiceGrpc.TrafficSignalServiceStub asyncStub = TrafficSignalServiceGrpc.newStub(channel);

    // Create response observer to handle server reply
    StreamObserver<SignalSummary> responseObserver = new StreamObserver<SignalSummary>() {
        @Override
        public void onNext(SignalSummary summary) {
            responseTextArea.append(" Sensor data sent.\n");
            responseTextArea.append("• Total Events: " + summary.getTotalEvents() + "\n");
            responseTextArea.append("• Highest Density: " + summary.getHighestDensityType() + "\n\n");

        }

        @Override
        public void onError(Throwable t) {
            responseTextArea.append(" Error sending data: " + t.getMessage() + "\n");
        }

        @Override
        public void onCompleted() {
            responseTextArea.append(" Sensor upload completed.\n\n");
        }
    };

    // Create request stream to send sensor events
    StreamObserver<SignalEvent> requestObserver = asyncStub.reportTrafficEvents(responseObserver);

    try {
        // Read values from GUI fields
        int vehicles = Integer.parseInt(vehicleField.getText().trim());
        int pedestrians = Integer.parseInt(pedestrianField.getText().trim());
        int bicycles = Integer.parseInt(bicycleField.getText().trim());

        // Send three events: vehicle, pedestrian, bicycle
        requestObserver.onNext(SignalEvent.newBuilder()
                .setSensorType("vehicle")
                .setSensorValue(vehicles)
                .build());

        requestObserver.onNext(SignalEvent.newBuilder()
                .setSensorType("pedestrian")
                .setSensorValue(pedestrians)
                .build());

        requestObserver.onNext(SignalEvent.newBuilder()
                .setSensorType("bicycle")
                .setSensorValue(bicycles)
                .build());

        // Complete stream
        requestObserver.onCompleted();

    } catch (NumberFormatException e) {
        responseTextArea.append("️ Please enter valid numbers in all sensor fields.\n");
    } catch (Exception e) {
        responseTextArea.append(" Unexpected error: " + e.getMessage() + "\n");
    }
    }//GEN-LAST:event_sendSensorButtonActionPerformed

    private void zoneComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoneComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_zoneComboBoxActionPerformed

    private void btnBackToMainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToMainActionPerformed
        // TODO add your handling code here:
        new MainServiceLauncher().setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnBackToMainActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TrafficSignalServiceGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new TrafficSignalServiceGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adjustSignalButton;
    private javax.swing.JTextField bicycleField;
    private javax.swing.JButton btnBackToMain;
    private javax.swing.JButton getSignalButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JTextField pedestrianField;
    private javax.swing.JTextArea responseTextArea;
    private javax.swing.JButton sendSensorButton;
    private javax.swing.JComboBox<String> signalComboBox;
    private javax.swing.JButton startStreamButton;
    private javax.swing.JTextField vehicleField;
    private javax.swing.JComboBox<String> zoneComboBox;
    // End of variables declaration//GEN-END:variables
    
    // Authentication helper
        private static ClientInterceptor makeAuthHeader() {
            Metadata headers = new Metadata();
            Metadata.Key<String> key = Metadata.Key.of("api_key", Metadata.ASCII_STRING_MARSHALLER);
            headers.put(key, "schoolzone123");
        return MetadataUtils.newAttachHeadersInterceptor(headers);
    }

}
